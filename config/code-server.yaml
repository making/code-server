#@ load("@ytt:data", "data")
#@ namespace = data.values.namespace + "-" + data.values.suffix if data.values.suffix else data.values.namespace
#@ hostname = data.values.code_server.external_url_format.format(data.values.suffix).replace("http://","").replace("https://","").replace("-None","")

#@ if data.values.code_server.create_namespace :
apiVersion: v1
kind: Namespace
metadata:
  name: #@ namespace
#@ end
---
apiVersion: v1
kind: Service
metadata:
  name: code-server
  namespace: #@ namespace
spec:
  ports:
  - port: 3080
    name: http
    protocol: TCP
  selector:
    app: code-server
  type: ClusterIP
#@ def create_certificate():
#@   if data.values.code_server.clusterissuer:
#@     return False
#@   end
#@   if data.values.code_server.ingress.tls_disabled:
#@     return False
#@   end
#@   return True
#@ end
#@ if create_certificate() :
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: code-server-selfsigned-issuer
  namespace: #@ namespace
spec:
  selfSigned: { }
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: code-server-ca
  namespace: #@ namespace
spec:
  commonName: code-server-ca
  isCA: true
  issuerRef:
    kind: Issuer
    name: code-server-selfsigned-issuer
  secretName: code-server-ca
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: code-server-ca-issuer
  namespace: #@ namespace
spec:
  ca:
    secretName: code-server-ca
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: code-server-tls
  namespace: #@ namespace
spec:
  dnsNames:
  - #@ hostname
  - #@ "code-server.{}.svc.cluster.local".format(namespace)
  - #@ "code-server.{}".format(namespace)
  - 127.0.0.1
  - localhost
  issuerRef:
    kind: Issuer
    name: code-server-ca-issuer
  secretName: code-server-tls
#@ elif data.values.code_server.clusterissuer:
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: code-server-tls
  namespace: #@ namespace
spec:
  dnsNames:
  - #@ hostname
  issuerRef:
    kind: ClusterIssuer
    name: #@ data.values.code_server.clusterissuer
  secretName: code-server-tls
#@ end
---
#@ def merge_ingress_annotations(fixed_values):
#@   annotations = {}
#@   annotations.update(fixed_values)
#@   if hasattr(data.values.code_server.ingress, "annotations"):
#@     annotations.update(data.values.code_server.ingress.annotations)
#@   end
#@   if data.values.code_server.ingress_class:
#@     annotations.update({"kubernetes.io/ingress.class": data.values.code_server.ingress_class})
#@   end
#@   return annotations
#@ end
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: code-server
  namespace: #@ namespace
  annotations: #@ merge_ingress_annotations({"projectcontour.io/websocket-routes": "/"})
spec:
  #@ if/end data.values.code_server.ingress.class_name:
  ingressClassName: #@ data.values.code_server.ingress.class_name
  rules:
  - host: #@ hostname
    http:
      paths:
      - backend:
          service:
            name: code-server
            port:
              number: 3080
        path: /
        pathType: Prefix
  #@ if not data.values.code_server.ingress.tls_disabled:
  tls:
  - hosts:
    - #@ hostname
    secretName: code-server-tls
  #@ end
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: code-store
  namespace: #@ namespace
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: #@ data.values.code_server.storage_size
---
#@ if not data.values.code_server.auth_disabled:
apiVersion: secretgen.k14s.io/v1alpha1
kind: Password
metadata:
  name: code-server-password
  namespace: #@ namespace
spec:
  secretTemplate:
    type: Opaque
    stringData:
      password: $(value)
#@ end
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: code-server
  name: code-server
  namespace: #@ namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: code-server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: code-server
    spec:
      #@ if/end len(data.values.code_server.image_pull_secrets) > 0 :
      imagePullSecrets: #@ data.values.code_server.image_pull_secrets
      initContainers:
      - name: copy-files
        image: ghcr.io/making/code-server:latest
        command:
        - bash
        - -cex
        #@yaml/text-templated-strings
        - |
          (@ if data.values.code_server.clean: -@)
          rm -f /var/coder/.bashrc
          rm -rf /var/coder/.config
          rm -rf /var/coder/.local
          rm -rf /var/coder/.cache
          rm -rf /var/coder/.krew
          rm -f /var/coder/install-from-tanzunet.sh
          (@- end @)
          
          (@= data.values.code_server.init_script @)
          
          if [ ! -f /var/coder/.bashrc ]; then
            cp /home/coder/.bashrc /var/coder/
          fi
          if [ ! -f /var/coder/install-from-tanzunet.sh ]; then
            if [ -f /home/coder/install-from-tanzunet.sh ]; then
              cp /home/coder/install-from-tanzunet.sh /var/coder/
            fi
          fi
          if [ ! -d /var/coder/.local ]; then
            mkdir -p /var/coder/.local
            mv /home/coder/.local/* /var/coder/.local/
          fi
          if [ ! -d /var/coder/.config ]; then
            mkdir -p /var/coder/.config
            mv /home/coder/.config/* /var/coder/.config/
          fi
          if [ ! -d /var/coder/.cache ]; then
            mkdir -p /var/coder/.cache
            mv /home/coder/.cache/* /var/coder/.cache/
          fi
          if [ ! -d /var/coder/.krew ]; then
            mkdir -p /var/coder/.krew
            mv /home/coder/.krew/* /var/coder/.krew/
          fi
          rm -rf /var/coder/lost+found
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /var/coder
          name: code-server-storage
      - name: change-own
        image: ghcr.io/making/busybox:latest
        command: [ "/bin/chown","-R","1000:1000","/home/coder" ]
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /home/coder
          name: code-server-storage
      containers:
      - name: code-server
        image: ghcr.io/making/code-server:latest
        #@ def build_args():
        #@   args = data.values.code_server.args
        #@   if data.values.code_server.auth_disabled:
        #@     auth_none = ["--auth", "none"]
        #@     if args:
        #@       args.extend(auth_none)
        #@     else:
        #@       return auth_none
        #@     end
        #@   end
        #@   return args
        #@ end
        #@ args = build_args()
        #@ if/end args:
        args: #@ args
        imagePullPolicy: Always
        env:
        - name: PORT
          value: "3080"
        #@ if not data.values.code_server.auth_disabled:
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: code-server-password
              key: password
        #@ end
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        #@ for i in range(len(data.values.code_server.env)):
        - #@ data.values.code_server.env[i]
        #@ end
        resources: #@ data.values.resources
        ports:
        - containerPort: 3080
          name: http
          protocol: TCP
        volumeMounts:
        - mountPath: /home/coder
          name: code-server-storage
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
      - name: code-server-storage
        persistentVolumeClaim:
          claimName: code-store
